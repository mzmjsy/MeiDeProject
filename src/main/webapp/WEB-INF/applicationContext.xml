<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:task="http://www.springframework.org/schema/task" xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="          
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd          
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd          
      http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd          
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd          
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
      http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd"
     >

    <!-- CXF webService -->
	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" />
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" />

    <!-- 属性文件读入 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
               <!--  <value>classpath:config.properties</value> -->
            </list>
        </property>
    </bean>
    <!-- 配置数据源 -->
    <bean id="absDataSource" class="com.alibaba.druid.pool.DruidDataSource" abstract="true">
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="0" />
        <property name="minIdle" value="10" />
        <property name="maxActive" value="20" />
        <!-- 获取连接时最大等待时间，单位毫秒 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="30000" />
        <!-- 验证使用的SQL语句 -->
        <property name="validationQuery" value="SELECT 1 FROM DUAL" />
        <!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除 -->
        <property name="testWhileIdle" value="true" />
        <!-- 借出连接时不要测试，否则很影响性能 -->
        <property name="testOnBorrow" value="false" />
        <!-- 回收连接时不要测试，否则很影响性能 -->
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache -->
        <property name="poolPreparedStatements" value="true" />
        <!-- 每个连接上PSCache的大小 -->
        <property name="maxOpenPreparedStatements" value="20" />
        <!-- 空闲连接是否强制关闭 -->
        <property name="removeAbandoned" value="true" />
        <!-- 空闲连接强制关闭时间，单位是秒 -->
        <property name="removeAbandonedTimeout" value="1800" />
        <!-- 空闲连接强制关闭动作记录到日志 -->
        <property name="logAbandoned" value="true" />
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="stat" />
    </bean>
	<bean id="imsDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" parent="absDataSource">
	<!-- 基本属性 url、account、password -->
	    <property name="url" value="${jdbc.url}" />  
	    <property name="username" value="${jdbc.username}" />  
	    <property name="password" value="${jdbc.password}" /> 
		<!-- 数据库类型，可不配置，不配置则druid根据url自动识别 --> 	
	    <property name="driverClassName" value="${jdbc.driver}" />	
	</bean>
	<bean id="erpDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" parent="absDataSource">
		<property name="url" value="${jdbc.url_erp}" />
	    <property name="username" value="${jdbc.username_erp}" />
	    <property name="password" value="${jdbc.password_erp}" />
		<!-- 数据库类型，可不配置，不配置则druid根据url自动识别 --> 	
	    <property name="driverClassName" value="${jdbc.driver_erp}" />
	</bean>
	<bean id="oaDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" parent="absDataSource">
		<property name="url" value="${jdbc.url_oa}" />
	    <property name="username" value="${jdbc.username_oa}" />
	    <property name="password" value="${jdbc.password_oa}" />
		<!-- 数据库类型，可不配置，不配置则druid根据url自动识别 --> 	
	    <property name="driverClassName" value="${jdbc.driver_oa}" />
	</bean>
	<bean id="ebsDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" parent="absDataSource">
		<property name="driverClassName" value="${jdbc.driver_ebs}"></property>
		<property name="url" value="${jdbc.url_ebs}"></property>
		<property name="username" value="${jdbc.username_ebs}"></property>
		<property name="password" value="${jdbc.password_ebs}"></property>
	</bean>

    <!-- 配置数据源 -->
	<bean id="dynamicDataSource" class="com.md.util.DataSources">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="imsDataSource" key="IMS"></entry>
				<entry value-ref="erpDataSource" key="ERP"></entry>
				<entry value-ref="oaDataSource" key="OA"></entry>
				<entry value-ref="ebsDataSource" key="EBS"></entry>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="imsDataSource"></property>
	</bean>

 	<context:component-scan base-package="com.md">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!-- mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源 MyBatis定义数据源,同意加载配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dynamicDataSource"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
	</bean>

    <!-- 配置mapper扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.md.*.persistence,com.md.*.*.persistence,com.md.persistence.*" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!-- 事务控制 对MyBatis操作数据库 spring使用JDBC事务控制类 -->
    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dynamicDataSource"></property>
    </bean>
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- 启用事务 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
		  <tx:method name="save*" rollback-for="com.md.*.exception.CRUDException,Exception" />
	      <tx:method name="create*" rollback-for="com.md.*.exception.CRUDException,Exception" />
	      <tx:method name="copy*" rollback-for="com.md.*.exception.CRUDException,Exception" />
	      <tx:method name="update*" rollback-for="com.md.*.exception.CRUDException,Exception" />
	      <tx:method name="check*" rollback-for="com.md.*.exception.CRUDException,Exception" />
	      <tx:method name="delete*" rollback-for="com.md.*.exception.CRUDException,Exception" />
	      <tx:method name="find*" read-only="true" rollback-for="com.md.*.exception.CRUDException,Exception" />
	      <tx:method name="list*" read-only="true" rollback-for="com.md.*.exception.CRUDException,Exception" />
	      <tx:method name="is*" read-only="true" rollback-for="com.md.*.exception.CRUDException,Exception" />
	      <tx:method name="*" read-only="true" rollback-for="com.md.*.exception.CRUDException,Exception" />
	      <tx:method name="batch*" rollback-for="com.md.*.exception.CRUDException,Exception" />
		  <tx:method name="disable*" rollback-for="com.md.*.exception.CRUDException,Exception" />
	      <tx:method name="enable*" rollback-for="com.md.*.exception.CRUDException,Exception" />
	      <tx:method name="add*" rollback-for="com.md.*.exception.CRUDException,Exception" />
	      <tx:method name="edit*" rollback-for="com.md.*.exception.CRUDException,Exception" />
	      <tx:method name="IsEnable*" rollback-for="com.md.*.exception.CRUDException,Exception" />
	      <tx:method name="estimate*" rollback-for="com.md.*.exception.CRUDException,Exception" />
	      <tx:method name="import*" rollback-for="com.md.*.exception.CRUDException,Exception" />
	      <tx:method name="publish*" rollback-for="com.md.*.exception.CRUDException,Exception" />
		</tx:attributes>
	</tx:advice>
	
	<!-- AOP代理设置 -->
	<aop:config>
        <aop:advisor pointcut="execution(* com.md.*.service.*.*.*.*(..))" advice-ref="txAdvice" />
        <aop:advisor pointcut="execution(* com.md.*.service.*.*.*(..))" advice-ref="txAdvice" />
        <aop:advisor pointcut="execution(* com.md.*.service.*.*(..))" advice-ref="txAdvice" />
	</aop:config>

	<!-- spring定时任务 --> 
	<task:executor id="executor" pool-size="5" />  
    <task:scheduler id="scheduler" pool-size="10" />  
    <task:annotation-driven executor="executor" scheduler="scheduler" /> 

    <!-- 激活annotation功能 -->
	<context:annotation-config />
	
	<context:spring-configured/>

	<!-- 使用注解自动生成代理对象 -->
	<aop:aspectj-autoproxy/>
</beans>